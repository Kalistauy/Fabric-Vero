El contenido es generado por usuarios y no verificado.
3
name: Microsoft Fabric CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  WORKSPACE_NAME: "WS-github-integration-dev"
  PIPELINE_NAME: "github-integration-pipelines"
  FABRIC_API_URL: "https://api.fabric.microsoft.com/v1"
  AZURE_LOGIN_URL: "https://login.microsoftonline.com"

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Get Azure AD Token
      id: get_token
      run: |
        # Get access token using service principal
        TOKEN_RESPONSE=$(curl -s -X POST \
          "${{ env.AZURE_LOGIN_URL }}/${{ secrets.TENANT_ID }}/oauth2/v2.0/token" \
          -H "Content-Type: application/x-www-form-urlencoded" \
          -d "client_id=${{ secrets.CLIENT_ID }}" \
          -d "client_secret=${{ secrets.CLIENT_SECRET }}" \
          -d "scope=https://api.fabric.microsoft.com/.default" \
          -d "grant_type=client_credentials")
        
        ACCESS_TOKEN=$(echo "$TOKEN_RESPONSE" | jq -r '.access_token')
        echo "::add-mask::$ACCESS_TOKEN"
        echo "access_token=$ACCESS_TOKEN" >> $GITHUB_OUTPUT

    - name: Get Workspace ID
      id: get_workspace
      run: |
        # Get workspace by name
        WORKSPACE_RESPONSE=$(curl -s -X GET \
          "${{ env.FABRIC_API_URL }}/workspaces" \
          -H "Authorization: Bearer ${{ steps.get_token.outputs.access_token }}" \
          -H "Content-Type: application/json")
        
        WORKSPACE_ID=$(echo "$WORKSPACE_RESPONSE" | jq -r --arg name "${{ env.WORKSPACE_NAME }}" '.value[] | select(.displayName == $name) | .id')
        echo "workspace_id=$WORKSPACE_ID" >> $GITHUB_OUTPUT
        echo "Found workspace: $WORKSPACE_ID"

    - name: Connect to Git (if not already connected)
      run: |
        # Check if workspace is already connected to Git
        GIT_STATUS=$(curl -s -X GET \
          "${{ env.FABRIC_API_URL }}/workspaces/${{ steps.get_workspace.outputs.workspace_id }}/git/status" \
          -H "Authorization: Bearer ${{ steps.get_token.outputs.access_token }}" \
          -H "Content-Type: application/json")
        
        IS_CONNECTED=$(echo "$GIT_STATUS" | jq -r '.isGitSyncEnabled // false')
        
        if [ "$IS_CONNECTED" != "true" ]; then
          echo "Connecting workspace to Git..."
          
          CONNECT_PAYLOAD=$(cat <<EOF
        {
          "gitProviderDetails": {
            "gitProviderType": "GitHub",
            "ownerName": "${{ github.repository_owner }}",
            "repositoryName": "${{ github.event.repository.name }}",
            "branchName": "${{ github.ref_name }}",
            "directoryName": "fabric-items"
          }
        }
        EOF
        )
          
          curl -s -X POST \
            "${{ env.FABRIC_API_URL }}/workspaces/${{ steps.get_workspace.outputs.workspace_id }}/git/connect" \
            -H "Authorization: Bearer ${{ steps.get_token.outputs.access_token }}" \
            -H "Content-Type: application/json" \
            -d "$CONNECT_PAYLOAD"
          
          echo "Workspace connected to Git"
        else
          echo "Workspace already connected to Git"
        fi

    - name: Update from Git
      run: |
        # Sync workspace with latest Git changes
        echo "Updating workspace from Git..."
        
        UPDATE_RESPONSE=$(curl -s -X POST \
          "${{ env.FABRIC_API_URL }}/workspaces/${{ steps.get_workspace.outputs.workspace_id }}/git/updateFromGit" \
          -H "Authorization: Bearer ${{ steps.get_token.outputs.access_token }}" \
          -H "Content-Type: application/json" \
          -d '{"allowOverrideItems": true}')
        
        echo "Update initiated"
        echo "$UPDATE_RESPONSE"

    - name: Get Deployment Pipeline ID
      id: get_pipeline
      run: |
        # Get deployment pipelines
        PIPELINES_RESPONSE=$(curl -s -X GET \
          "${{ env.FABRIC_API_URL }}/deploymentPipelines" \
          -H "Authorization: Bearer ${{ steps.get_token.outputs.access_token }}" \
          -H "Content-Type: application/json")
        
        PIPELINE_ID=$(echo "$PIPELINES_RESPONSE" | jq -r --arg name "${{ env.PIPELINE_NAME }}" '.value[] | select(.displayName == $name) | .id')
        echo "pipeline_id=$PIPELINE_ID" >> $GITHUB_OUTPUT
        echo "Found pipeline: $PIPELINE_ID"

    - name: Deploy to Test Stage
      if: github.ref == 'refs/heads/main'
      run: |
        # Deploy from dev to test stage
        echo "Deploying to Test stage..."
        
        # Get pipeline stages to find source and target stage IDs
        STAGES_RESPONSE=$(curl -s -X GET \
          "${{ env.FABRIC_API_URL }}/deploymentPipelines/${{ steps.get_pipeline.outputs.pipeline_id }}/stages" \
          -H "Authorization: Bearer ${{ steps.get_token.outputs.access_token }}" \
          -H "Content-Type: application/json")
        
        SOURCE_STAGE_ID=$(echo "$STAGES_RESPONSE" | jq -r '.value[] | select(.order == 0) | .id')
        TARGET_STAGE_ID=$(echo "$STAGES_RESPONSE" | jq -r '.value[] | select(.order == 1) | .id')
        
        # Deploy content
        DEPLOY_PAYLOAD=$(cat <<EOF
        {
          "sourceStageOrder": 0,
          "targetStageOrder": 1,
          "options": {
            "allowCreateArtifact": true,
            "allowOverwriteArtifact": true
          }
        }
        EOF
        )
        
        DEPLOY_RESPONSE=$(curl -s -X POST \
          "${{ env.FABRIC_API_URL }}/deploymentPipelines/${{ steps.get_pipeline.outputs.pipeline_id }}/deploy" \
          -H "Authorization: Bearer ${{ steps.get_token.outputs.access_token }}" \
          -H "Content-Type: application/json" \
          -d "$DEPLOY_PAYLOAD")
        
        OPERATION_ID=$(echo "$DEPLOY_RESPONSE" | jq -r '.id')
        echo "Deployment started. Operation ID: $OPERATION_ID"

    - name: Monitor Deployment Status
      if: github.ref == 'refs/heads/main'
      run: |
        # Wait for deployment to complete
        echo "Monitoring deployment status..."
        
        for i in {1..30}; do
          STATUS_RESPONSE=$(curl -s -X GET \
            "${{ env.FABRIC_API_URL }}/deploymentPipelines/${{ steps.get_pipeline.outputs.pipeline_id }}/operations" \
            -H "Authorization: Bearer ${{ steps.get_token.outputs.access_token }}" \
            -H "Content-Type: application/json")
          
          LATEST_STATUS=$(echo "$STATUS_RESPONSE" | jq -r '.value[0].status // "Unknown"')
          echo "Current status: $LATEST_STATUS"
          
          if [ "$LATEST_STATUS" = "Succeeded" ]; then
            echo "✅ Deployment completed successfully!"
            break
          elif [ "$LATEST_STATUS" = "Failed" ]; then
            echo "❌ Deployment failed!"
            exit 1
          fi
          
          echo "Waiting for deployment to complete... (attempt $i/30)"
          sleep 10
        done

    - name: Deploy to Production (Manual Approval)
      if: github.ref == 'refs/heads/main' && github.event_name == 'workflow_dispatch'
      run: |
        # Deploy from test to production (only on manual trigger)
        echo "Deploying to Production stage..."
        
        DEPLOY_PAYLOAD=$(cat <<EOF
        {
          "sourceStageOrder": 1,
          "targetStageOrder": 2,
          "options": {
            "allowCreateArtifact": true,
            "allowOverwriteArtifact": true
          }
        }
        EOF
        )
        
        curl -s -X POST \
          "${{ env.FABRIC_API_URL }}/deploymentPipelines/${{ steps.get_pipeline.outputs.pipeline_id }}/deploy" \
          -H "Authorization: Bearer ${{ steps.get_token.outputs.access_token }}" \
          -H "Content-Type: application/json" \
          -d "$DEPLOY_PAYLOAD"
        
        echo "Production deployment initiated"

    - name: Commit Changes Back to Git
      if: github.event_name == 'workflow_dispatch'
      run: |
        # Commit any workspace changes back to Git
        echo "Committing workspace changes to Git..."
        
        COMMIT_PAYLOAD=$(cat <<EOF
        {
          "mode": "All",
          "comment": "Automated deployment commit from GitHub Actions",
          "workspaceHead": "main"
        }
        EOF
        )
        
        curl -s -X POST \
          "${{ env.FABRIC_API_URL }}/workspaces/${{ steps.get_workspace.outputs.workspace_id }}/git/commitToGit" \
          -H "Authorization: Bearer ${{ steps.get_token.outputs.access_token }}" \
          -H "Content-Type: application/json" \
          -d "$COMMIT_PAYLOAD"
        
        echo "Changes committed to Git"
