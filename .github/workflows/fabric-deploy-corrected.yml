name: Microsoft Fabric CI/CD

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  FABRIC_API_URL: "https://api.fabric.microsoft.com/v1"
  AZURE_LOGIN_URL: "https://login.microsoftonline.com"
  WORKSPACE_NAME: "WS-github-integration-dev"
  PIPELINE_NAME: "github-integration-pipelines"

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get Azure AD Token
        id: get_token
        run: |
          TOKEN_RESPONSE=$(curl -s -X POST \
            "${{ env.AZURE_LOGIN_URL }}/${{ secrets.TENANT_ID }}/oauth2/v2.0/token" \
            -H "Content-Type: application/x-www-form-urlencoded" \
            -d "client_id=${{ secrets.CLIENT_ID }}" \
            -d "client_secret=${{ secrets.CLIENT_SECRET }}" \
            -d "scope=https://api.fabric.microsoft.com/.default" \
            -d "grant_type=client_credentials")
          ACCESS_TOKEN=$(echo "$TOKEN_RESPONSE" | jq -r '.access_token')
          echo "::add-mask::$ACCESS_TOKEN"
          echo "access_token=$ACCESS_TOKEN" >> $GITHUB_OUTPUT

      - name: Get Workspace ID
        id: get_workspace
        run: |
          WORKSPACE_RESPONSE=$(curl -s -X GET \
            "${{ env.FABRIC_API_URL }}/workspaces" \
            -H "Authorization: Bearer ${{ steps.get_token.outputs.access_token }}" \
            -H "Content-Type: application/json")
          WORKSPACE_ID=$(echo "$WORKSPACE_RESPONSE" | jq -r --arg name "${{ env.WORKSPACE_NAME }}" '.value[] | select(.displayName == $name) | .id')
          echo "workspace_id=$WORKSPACE_ID" >> $GITHUB_OUTPUT

      - name: Connect to Git (if not already connected)
        run: |
          GIT_STATUS=$(curl -s -X GET \
            "${{ env.FABRIC_API_URL }}/workspaces/${{ steps.get_workspace.outputs.workspace_id }}/git/status" \
            -H "Authorization: Bearer ${{ steps.get_token.outputs.access_token }}" \
            -H "Content-Type: application/json")
          IS_CONNECTED=$(echo "$GIT_STATUS" | jq -r '.isGitSyncEnabled // false')
          if [ "$IS_CONNECTED" != "true" ]; then
            echo "Connecting workspace to Git..."
            CONNECT_PAYLOAD=$(cat <<EOF
          {
            "gitProviderDetails": {
              "gitProviderType": "GitHub",
              "ownerName": "${{ github.repository_owner }}",
              "repositoryName": "${{ github.event.repository.name }}",
              "branchName": "${{ github.ref_name }}",
              "directoryName": "fabric-items"
            }
          }
          EOF
          )
            curl -s -X POST \
              "${{ env.FABRIC_API_URL }}/workspaces/${{ steps.get_workspace.outputs.workspace_id }}/git/connect" \
              -H "Authorization: Bearer ${{ steps.get_token.outputs.access_token }}" \
              -H "Content-Type: application/json" \
              -d "$CONNECT_PAYLOAD"
          else
            echo "Workspace already connected to Git"
          fi
      - name: Update from Git
        run: |
          curl -s -X POST \
            "${{ env.FABRIC_API_URL }}/workspaces/${{ steps.get_workspace.outputs.workspace_id }}/git/updateFromGit" \
            -H "Authorization: Bearer ${{ steps.get_token.outputs.access_token }}" \
            -H "Content-Type: application/json" \
            -d '{"allowOverrideItems": true}'

      - name: Get Deployment Pipeline ID
        id: get_pipeline
        run: |
          PIPELINES_RESPONSE=$(curl -s -X GET \
            "${{ env.FABRIC_API_URL }}/deploymentPipelines" \
            -H "Authorization: Bearer ${{ steps.get_token.outputs.access_token }}" \
            -H "Content-Type: application/json")
          PIPELINE_ID=$(echo "$PIPELINES_RESPONSE" | jq -r --arg name "${{ env.PIPELINE_NAME }}" '.value[] | select(.displayName == $name) | .id')
          echo "pipeline_id=$PIPELINE_ID" >> $GITHUB_OUTPUT

      - name: Deploy to Test Stage
        if: github.ref == 'refs/heads/main'
        run: |
          STAGES_RESPONSE=$(curl -s -X GET \
            "${{ env.FABRIC_API_URL }}/deploymentPipelines/${{ steps.get_pipeline.outputs.pipeline_id }}/stages" \
            -H "Authorization: Bearer ${{ steps.get_token.outputs.access_token }}" \
            -H "Content-Type: application/json")
          SOURCE_STAGE_ID=$(echo "$STAGES_RESPONSE" | jq -r '.value[] | select(.order == 0) | .id')
          TARGET_STAGE_ID=$(echo "$STAGES_RESPONSE" | jq -r '.value[] | select(.order == 1) | .id')
          DEPLOY_PAYLOAD=$(cat <<EOF
          {
            "sourceStageOrder": 0,
            "targetStageOrder": 1,
            "options": {
              "allowCreateArtifact": true,
              "allowOverwriteArtifact": true
            }
          }
          EOF
          )
          curl -s -X POST \
            "${{ env.FABRIC_API_URL }}/deploymentPipelines/${{ steps.get_pipeline.outputs.pipeline_id }}/deploy" \
            -H "Authorization: Bearer ${{ steps.get_token.outputs.access_token }}" \
            -H "Content-Type: application/json" \
            -d "$DEPLOY_PAYLOAD"

      - name: Deploy to Production (Manual Approval)
        if: github.ref == 'refs/heads/main' && github.event_name == 'workflow_dispatch'
        run: |
          DEPLOY_PAYLOAD=$(cat <<EOF
          {
            "sourceStageOrder": 1,
            "targetStageOrder": 2,
            "options": {
              "allowCreateArtifact": true,
              "allowOverwriteArtifact": true
            }
          }
          EOF
          )
          curl -s -X POST \
            "${{ env.FABRIC_API_URL }}/deploymentPipelines/${{ steps.get_pipeline.outputs.pipeline_id }}/deploy" \
            -H "Authorization: Bearer ${{ steps.get_token.outputs.access_token }}" \
            -H "Content-Type: application/json" \
            -d "$DEPLOY_PAYLOAD"

      - name: Commit Changes Back to Git
        if: github.event_name == 'workflow_dispatch'
        run: |
          COMMIT_PAYLOAD=$(cat <<EOF
          {
            "mode": "All",
            "comment": "Automated deployment commit from GitHub Actions",
            "workspaceHead": "main"
          }
          EOF
          )
          curl -s -X POST \
            "${{ env.FABRIC_API_URL }}/workspaces/${{ steps.get_workspace.outputs.workspace_id }}/git/commitToGit" \
            -H "Authorization: Bearer ${{ steps.get_token.outputs.access_token }}" \
            -H "Content-Type: application/json" \
            -d "$COMMIT_PAYLOAD"
