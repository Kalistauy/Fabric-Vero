
name: Microsoft Fabric CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  FABRIC_API_URL: "https://api.fabric.microsoft.com/v1"
  AZURE_LOGIN_URL: "https://login.microsoftonline.com"

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get Azure AD Token
        id: get_token
        run: |
          TOKEN_RESPONSE=$(curl -s -X POST             "$AZURE_LOGIN_URL/${{ secrets.TENANT_ID }}/oauth2/v2.0/token"             -H "Content-Type: application/x-www-form-urlencoded"             -d "client_id=${{ secrets.CLIENT_ID }}"             -d "client_secret=${{ secrets.CLIENT_SECRET }}"             -d "scope=https://api.fabric.microsoft.com/.default"             -d "grant_type=client_credentials")

          ACCESS_TOKEN=$(echo "$TOKEN_RESPONSE" | jq -r '.access_token')
          echo "::add-mask::$ACCESS_TOKEN"
          echo "access_token=$ACCESS_TOKEN" >> $GITHUB_OUTPUT

      - name: Get Workspace ID
        id: get_workspace
        run: |
          WORKSPACE_RESPONSE=$(curl -s -X GET             "$FABRIC_API_URL/workspaces"             -H "Authorization: Bearer ${{ steps.get_token.outputs.access_token }}"             -H "Content-Type: application/json")

          WORKSPACE_ID=$(echo "$WORKSPACE_RESPONSE" | jq -r --arg name "${{ vars.WORKSPACE_NAME }}" '.value[] | select(.displayName == $name) | .id')
          echo "workspace_id=$WORKSPACE_ID" >> $GITHUB_OUTPUT

      - name: Update from Git
        run: |
          curl -s -X POST             "$FABRIC_API_URL/workspaces/${{ steps.get_workspace.outputs.workspace_id }}/git/updateFromGit"             -H "Authorization: Bearer ${{ steps.get_token.outputs.access_token }}"             -H "Content-Type: application/json"             -d '{"allowOverrideItems": true}'

      - name: Get Deployment Pipeline ID
        id: get_pipeline
        run: |
          PIPELINES_RESPONSE=$(curl -s -X GET             "$FABRIC_API_URL/deploymentPipelines"             -H "Authorization: Bearer ${{ steps.get_token.outputs.access_token }}"             -H "Content-Type: application/json")

          PIPELINE_ID=$(echo "$PIPELINES_RESPONSE" | jq -r --arg name "${{ vars.PIPELINE_NAME }}" '.value[] | select(.displayName == $name) | .id')
          echo "pipeline_id=$PIPELINE_ID" >> $GITHUB_OUTPUT

      - name: Deploy to Test Stage
        if: github.ref == 'refs/heads/main'
        run: |
          STAGES_RESPONSE=$(curl -s -X GET             "$FABRIC_API_URL/deploymentPipelines/${{ steps.get_pipeline.outputs.pipeline_id }}/stages"             -H "Authorization: Bearer ${{ steps.get_token.outputs.access_token }}"             -H "Content-Type: application/json")

          SOURCE_STAGE_ID=$(echo "$STAGES_RESPONSE" | jq -r '.value[] | select(.order == 0) | .id')
          TARGET_STAGE_ID=$(echo "$STAGES_RESPONSE" | jq -r '.value[] | select(.order == 1) | .id')

          DEPLOY_PAYLOAD=$(cat <<EOF
          {
            "sourceStageOrder": 0,
            "targetStageOrder": 1,
            "options": {
              "allowCreateArtifact": true,
              "allowOverwriteArtifact": true
            }
          }
          EOF
          )

          curl -s -X POST             "$FABRIC_API_URL/deploymentPipelines/${{ steps.get_pipeline.outputs.pipeline_id }}/deploy"             -H "Authorization: Bearer ${{ steps.get_token.outputs.access_token }}"             -H "Content-Type: application/json"             -d "$DEPLOY_PAYLOAD"

      - name: Deploy to Production (Manual Trigger)
        if: github.event_name == 'workflow_dispatch'
        run: |
          DEPLOY_PAYLOAD=$(cat <<EOF
          {
            "sourceStageOrder": 1,
            "targetStageOrder": 2,
            "options": {
              "allowCreateArtifact": true,
              "allowOverwriteArtifact": true
            }
          }
          EOF
          )

          curl -s -X POST             "$FABRIC_API_URL/deploymentPipelines/${{ steps.get_pipeline.outputs.pipeline_id }}/deploy"             -H "Authorization: Bearer ${{ steps.get_token.outputs.access_token }}"             -H "Content-Type: application/json"             -d "$DEPLOY_PAYLOAD"
