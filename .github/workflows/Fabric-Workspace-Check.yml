name: Microsoft Fabric Workspace Configuration Check

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  FABRIC_API_URL: "https://api.fabric.microsoft.com/v1"
  AZURE_LOGIN_URL: "https://login.microsoftonline.com"
  WORKSPACE_NAME: ${{ vars.WORKSPACE_NAME }}

jobs:
  check-workspace-config:
    name: Check Workspace Configuration
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get Azure AD Token
        id: get_token
        run: |
          set -e
          set -o pipefail
          
          echo "üîê Requesting Azure AD token..."
          
          # Make token request with HTTP status validation
          TOKEN_RESPONSE=$(curl -w "\n%{http_code}" -s -X POST \
            "${{ env.AZURE_LOGIN_URL }}/${{ secrets.TENANT_ID }}/oauth2/v2.0/token" \
            -H "Content-Type: application/x-www-form-urlencoded" \
            -d "client_id=${{ secrets.CLIENT_ID }}" \
            -d "client_secret=${{ secrets.CLIENT_SECRET }}" \
            -d "scope=https://api.fabric.microsoft.com/.default" \
            -d "grant_type=client_credentials")

          # Extract HTTP status code and response body
          HTTP_CODE=$(echo "$TOKEN_RESPONSE" | tail -n1)
          TOKEN_RESPONSE_BODY=$(echo "$TOKEN_RESPONSE" | sed '$d')

          echo "üìä Token request HTTP status: $HTTP_CODE"

          # Validate HTTP status
          if [ "$HTTP_CODE" != "200" ]; then
            echo "‚ùå ERROR: Token request failed with HTTP $HTTP_CODE"
            echo "Response: $TOKEN_RESPONSE_BODY"
            exit 1
          fi

          # Extract access token
          ACCESS_TOKEN=$(echo "$TOKEN_RESPONSE_BODY" | jq -r '.access_token')
          
          # Validate token extraction
          if [ -z "$ACCESS_TOKEN" ] || [ "$ACCESS_TOKEN" = "null" ]; then
            echo "‚ùå ERROR: Failed to extract access token from response"
            echo "Response: $TOKEN_RESPONSE_BODY"
            exit 1
          fi

          echo "‚úÖ Token obtained successfully (length: ${#ACCESS_TOKEN})"
          echo "::add-mask::$ACCESS_TOKEN"
          echo "access_token=$ACCESS_TOKEN" >> $GITHUB_OUTPUT

      - name: Get Workspace ID
        id: get_workspace
        run: |
          set -e
          set -o pipefail
          
          echo "üè¢ Getting workspace ID for: '${{ env.WORKSPACE_NAME }}'"
          
          # Validate WORKSPACE_NAME is not empty
          if [ -z "${{ env.WORKSPACE_NAME }}" ]; then
            echo "‚ùå ERROR: WORKSPACE_NAME is empty. Please set the WORKSPACE_NAME variable."
            exit 1
          fi
          
          # Make workspace request with HTTP status validation
          WORKSPACE_RESPONSE=$(curl -w "\n%{http_code}" -s -X GET \
            "${{ env.FABRIC_API_URL }}/workspaces" \
            -H "Authorization: Bearer ${{ steps.get_token.outputs.access_token }}" \
            -H "Content-Type: application/json")

          # Extract HTTP status code and response body
          HTTP_CODE=$(echo "$WORKSPACE_RESPONSE" | tail -n1)
          WORKSPACE_RESPONSE_BODY=$(echo "$WORKSPACE_RESPONSE" | sed '$d')

          echo "üìä Workspace request HTTP status: $HTTP_CODE"

          # Validate HTTP status
          if [ "$HTTP_CODE" != "200" ]; then
            echo "‚ùå ERROR: Workspace request failed with HTTP $HTTP_CODE"
            echo "Response: $WORKSPACE_RESPONSE_BODY"
            exit 1
          fi

          # Extract workspace ID
          WORKSPACE_ID=$(echo "$WORKSPACE_RESPONSE_BODY" | jq -r --arg name "${{ env.WORKSPACE_NAME }}" '.value[] | select(.displayName == $name) | .id')
          
          # Validate workspace ID extraction
          if [ -z "$WORKSPACE_ID" ] || [ "$WORKSPACE_ID" = "null" ]; then
            echo "‚ùå ERROR: Failed to find workspace with name: '${{ env.WORKSPACE_NAME }}'"
            echo "Available workspaces:"
            echo "$WORKSPACE_RESPONSE_BODY" | jq -r '.value[] | .displayName'
            exit 1
          fi

          echo "‚úÖ Found workspace: $WORKSPACE_ID"
          echo "workspace_id=$WORKSPACE_ID" >> $GITHUB_OUTPUT

      - name: Check workspace configuration
        run: |
          set -e
          set -o pipefail
          
          echo "üîç Checking workspace configuration..."

          # Get token and workspace IDs
          ACCESS_TOKEN="${{ steps.get_token.outputs.access_token }}"
          DEV_WORKSPACE_ID="${{ steps.get_workspace.outputs.workspace_id }}"
          TEST_WORKSPACE_ID="${{ secrets.TEST_WORKSPACE_ID }}"

          echo "üîç Validating inputs..."

          # Validate inputs
          if [ -z "$ACCESS_TOKEN" ]; then
            echo "‚ùå ERROR: ACCESS_TOKEN is empty"
            exit 1
          fi

          if [ -z "$DEV_WORKSPACE_ID" ]; then
            echo "‚ùå ERROR: DEV_WORKSPACE_ID is empty"
            exit 1
          fi

          if [ -z "$TEST_WORKSPACE_ID" ]; then
            echo "‚ùå ERROR: TEST_WORKSPACE_ID is empty"
            exit 1
          fi

          echo "‚úÖ Inputs validated:"
          echo "   Token length: ${#ACCESS_TOKEN}"
          echo "   Dev workspace: $DEV_WORKSPACE_ID"
          echo "   Test workspace: $TEST_WORKSPACE_ID"

          # Check DEV workspace details
          echo "üîç Checking DEV workspace details..."
          DEV_WORKSPACE_RESPONSE=$(curl -w "\n%{http_code}" -s -X GET \
            "${{ env.FABRIC_API_URL }}/workspaces/$DEV_WORKSPACE_ID" \
            -H "Authorization: Bearer $ACCESS_TOKEN" \
            -H "Content-Type: application/json")

          DEV_HTTP_CODE=$(echo "$DEV_WORKSPACE_RESPONSE" | tail -n1)
          DEV_RESPONSE_BODY=$(echo "$DEV_WORKSPACE_RESPONSE" | sed '$d')

          echo "üìä DEV workspace HTTP status: $DEV_HTTP_CODE"
          if [ "$DEV_HTTP_CODE" = "200" ]; then
            echo "‚úÖ DEV workspace found:"
            echo "   Name: $(echo "$DEV_RESPONSE_BODY" | jq -r '.displayName')"
            echo "   Type: $(echo "$DEV_RESPONSE_BODY" | jq -r '.type')"
            echo "   State: $(echo "$DEV_RESPONSE_BODY" | jq -r '.state')"
            echo "   Capacity ID: $(echo "$DEV_RESPONSE_BODY" | jq -r '.capacityId')"
            echo "   Is OnDedicatedCapacity: $(echo "$DEV_RESPONSE_BODY" | jq -r '.isOnDedicatedCapacity')"
          else
            echo "‚ùå ERROR: Failed to get DEV workspace details"
            echo "Response: $DEV_RESPONSE_BODY"
            exit 1
          fi

          # Check TEST workspace details
          echo "üîç Checking TEST workspace details..."
          TEST_WORKSPACE_RESPONSE=$(curl -w "\n%{http_code}" -s -X GET \
            "${{ env.FABRIC_API_URL }}/workspaces/$TEST_WORKSPACE_ID" \
            -H "Authorization: Bearer $ACCESS_TOKEN" \
            -H "Content-Type: application/json")

          TEST_HTTP_CODE=$(echo "$TEST_WORKSPACE_RESPONSE" | tail -n1)
          TEST_RESPONSE_BODY=$(echo "$TEST_WORKSPACE_RESPONSE" | sed '$d')

          echo "üìä TEST workspace HTTP status: $TEST_HTTP_CODE"
          if [ "$TEST_HTTP_CODE" = "200" ]; then
            echo "‚úÖ TEST workspace found:"
            echo "   Name: $(echo "$TEST_RESPONSE_BODY" | jq -r '.displayName')"
            echo "   Type: $(echo "$TEST_RESPONSE_BODY" | jq -r '.type')"
            echo "   State: $(echo "$TEST_RESPONSE_BODY" | jq -r '.state')"
            echo "   Capacity ID: $(echo "$TEST_RESPONSE_BODY" | jq -r '.capacityId')"
            echo "   Is OnDedicatedCapacity: $(echo "$TEST_RESPONSE_BODY" | jq -r '.isOnDedicatedCapacity')"
          else
            echo "‚ùå ERROR: Failed to get TEST workspace details"
            echo "Response: $TEST_RESPONSE_BODY"
            exit 1
          fi

          # Check if workspaces are in Fabric capacity
          echo "üîç Checking workspace capacity..."
          DEV_CAPACITY=$(echo "$DEV_RESPONSE_BODY" | jq -r '.capacityId')
          TEST_CAPACITY=$(echo "$TEST_RESPONSE_BODY" | jq -r '.capacityId')
          
          echo "   DEV workspace capacity: $DEV_CAPACITY"
          echo "   TEST workspace capacity: $TEST_CAPACITY"
          
          if [ "$DEV_CAPACITY" = "null" ] || [ "$TEST_CAPACITY" = "null" ]; then
            echo "‚ùå ERROR: One or both workspaces are not in a Fabric capacity"
            echo "   Workspaces must be in a Fabric capacity to use deployment pipelines"
            exit 1
          fi

          # Check workspace content
          echo "üîç Checking workspace content..."
          
          # Check DEV workspace content
          DEV_CONTENT_RESPONSE=$(curl -w "\n%{http_code}" -s -X GET \
            "${{ env.FABRIC_API_URL }}/workspaces/$DEV_WORKSPACE_ID/items" \
            -H "Authorization: Bearer $ACCESS_TOKEN" \
            -H "Content-Type: application/json")

          DEV_CONTENT_HTTP_CODE=$(echo "$DEV_CONTENT_RESPONSE" | tail -n1)
          DEV_CONTENT_BODY=$(echo "$DEV_CONTENT_RESPONSE" | sed '$d')

          echo "üìä DEV workspace content HTTP status: $DEV_CONTENT_HTTP_CODE"
          if [ "$DEV_CONTENT_HTTP_CODE" = "200" ]; then
            ITEM_COUNT=$(echo "$DEV_CONTENT_BODY" | jq -r '.value | length')
            echo "‚úÖ DEV workspace has $ITEM_COUNT items"
            if [ "$ITEM_COUNT" -gt 0 ]; then
              echo "   Items:"
              echo "$DEV_CONTENT_BODY" | jq -r '.value[] | "   - \(.displayName) (\(.type))"'
            else
              echo "‚ö†Ô∏è  WARNING: DEV workspace is empty - no content to deploy"
            fi
          else
            echo "‚ùå ERROR: Failed to get DEV workspace content"
            echo "Response: $DEV_CONTENT_BODY"
          fi

          echo "‚úÖ Workspace configuration check completed successfully!"
