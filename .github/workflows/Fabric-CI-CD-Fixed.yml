name: Microsoft Fabric CI/CD - Complete Fix

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  FABRIC_API_URL: "https://api.fabric.microsoft.com/v1"
  AZURE_LOGIN_URL: "https://login.microsoftonline.com"
  WORKSPACE_NAME: ${{ vars.WORKSPACE_NAME }}

jobs:
  get-token-and-workspace:
    name: Get Azure AD Token and Workspace ID
    runs-on: ubuntu-latest
    outputs:
      workspace_id: ${{ steps.get_workspace.outputs.workspace_id }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get Azure AD Token
        id: get_token
        run: |
          set -e
          set -o pipefail
          
          echo "üîê Requesting Azure AD token..."
          
          # Make token request with HTTP status validation
          TOKEN_RESPONSE=$(curl -w "\n%{http_code}" -s -X POST \
            "${{ env.AZURE_LOGIN_URL }}/${{ secrets.TENANT_ID }}/oauth2/v2.0/token" \
            -H "Content-Type: application/x-www-form-urlencoded" \
            -d "client_id=${{ secrets.CLIENT_ID }}" \
            -d "client_secret=${{ secrets.CLIENT_SECRET }}" \
            -d "scope=https://api.fabric.microsoft.com/.default" \
            -d "grant_type=client_credentials")

          # Extract HTTP status code and response body
          HTTP_CODE=$(echo "$TOKEN_RESPONSE" | tail -n1)
          TOKEN_RESPONSE_BODY=$(echo "$TOKEN_RESPONSE" | sed '$d')

          echo "üìä Token request HTTP status: $HTTP_CODE"

          # Validate HTTP status
          if [ "$HTTP_CODE" != "200" ]; then
            echo "‚ùå ERROR: Token request failed with HTTP $HTTP_CODE"
            echo "Response: $TOKEN_RESPONSE_BODY"
            exit 1
          fi

          # Extract access token
          ACCESS_TOKEN=$(echo "$TOKEN_RESPONSE_BODY" | jq -r '.access_token')
          
          # Validate token extraction
          if [ -z "$ACCESS_TOKEN" ] || [ "$ACCESS_TOKEN" = "null" ]; then
            echo "‚ùå ERROR: Failed to extract access token from response"
            echo "Response: $TOKEN_RESPONSE_BODY"
            exit 1
          fi

          echo "‚úÖ Token obtained successfully (length: ${#ACCESS_TOKEN})"
          echo "::add-mask::$ACCESS_TOKEN"
          echo "access_token=$ACCESS_TOKEN" >> $GITHUB_OUTPUT

      - name: Get Workspace ID
        id: get_workspace
        run: |
          set -e
          set -o pipefail
          
          echo "üè¢ Getting workspace ID for: '${{ env.WORKSPACE_NAME }}'"
          
          # Validate WORKSPACE_NAME is not empty
          if [ -z "${{ env.WORKSPACE_NAME }}" ]; then
            echo "‚ùå ERROR: WORKSPACE_NAME is empty. Please set the WORKSPACE_NAME variable."
            exit 1
          fi
          
          # Make workspace request with HTTP status validation
          WORKSPACE_RESPONSE=$(curl -w "\n%{http_code}" -s -X GET \
            "${{ env.FABRIC_API_URL }}/workspaces" \
            -H "Authorization: Bearer ${{ steps.get_token.outputs.access_token }}" \
            -H "Content-Type: application/json")

          # Extract HTTP status code and response body
          HTTP_CODE=$(echo "$WORKSPACE_RESPONSE" | tail -n1)
          WORKSPACE_RESPONSE_BODY=$(echo "$WORKSPACE_RESPONSE" | sed '$d')

          echo "üìä Workspace request HTTP status: $HTTP_CODE"

          # Validate HTTP status
          if [ "$HTTP_CODE" != "200" ]; then
            echo "‚ùå ERROR: Workspace request failed with HTTP $HTTP_CODE"
            echo "Response: $WORKSPACE_RESPONSE_BODY"
            exit 1
          fi

          # Extract workspace ID
          WORKSPACE_ID=$(echo "$WORKSPACE_RESPONSE_BODY" | jq -r --arg name "${{ env.WORKSPACE_NAME }}" '.value[] | select(.displayName == $name) | .id')
          
          # Validate workspace ID extraction
          if [ -z "$WORKSPACE_ID" ] || [ "$WORKSPACE_ID" = "null" ]; then
            echo "‚ùå ERROR: Failed to find workspace with name: '${{ env.WORKSPACE_NAME }}'"
            echo "Available workspaces:"
            echo "$WORKSPACE_RESPONSE_BODY" | jq -r '.value[] | .displayName'
            exit 1
          fi

          echo "‚úÖ Found workspace: $WORKSPACE_ID"
          echo "workspace_id=$WORKSPACE_ID" >> $GITHUB_OUTPUT

  deploy-dev-to-test:
    name: Deploy from Dev to Test
    needs: get-token-and-workspace
    runs-on: ubuntu-latest
    steps:
      - name: Get Azure AD Token
        id: get_token
        run: |
          set -e
          set -o pipefail
          
          echo "üîê Requesting Azure AD token..."
          
          # Make token request with HTTP status validation
          TOKEN_RESPONSE=$(curl -w "\n%{http_code}" -s -X POST \
            "${{ env.AZURE_LOGIN_URL }}/${{ secrets.TENANT_ID }}/oauth2/v2.0/token" \
            -H "Content-Type: application/x-www-form-urlencoded" \
            -d "client_id=${{ secrets.CLIENT_ID }}" \
            -d "client_secret=${{ secrets.CLIENT_SECRET }}" \
            -d "scope=https://api.fabric.microsoft.com/.default" \
            -d "grant_type=client_credentials")

          # Extract HTTP status code and response body
          HTTP_CODE=$(echo "$TOKEN_RESPONSE" | tail -n1)
          TOKEN_RESPONSE_BODY=$(echo "$TOKEN_RESPONSE" | sed '$d')

          echo "üìä Token request HTTP status: $HTTP_CODE"

          # Validate HTTP status
          if [ "$HTTP_CODE" != "200" ]; then
            echo "‚ùå ERROR: Token request failed with HTTP $HTTP_CODE"
            echo "Response: $TOKEN_RESPONSE_BODY"
            exit 1
          fi

          # Extract access token
          ACCESS_TOKEN=$(echo "$TOKEN_RESPONSE_BODY" | jq -r '.access_token')
          
          # Validate token extraction
          if [ -z "$ACCESS_TOKEN" ] || [ "$ACCESS_TOKEN" = "null" ]; then
            echo "‚ùå ERROR: Failed to extract access token from response"
            echo "Response: $TOKEN_RESPONSE_BODY"
            exit 1
          fi

          echo "‚úÖ Token obtained successfully (length: ${#ACCESS_TOKEN})"
          echo "::add-mask::$ACCESS_TOKEN"
          echo "access_token=$ACCESS_TOKEN" >> $GITHUB_OUTPUT

      - name: Deploy content
        run: |
          set -e
          set -o pipefail
          
          echo "üöÄ Starting deployment from Dev to Test workspace..."

          # Get token and workspace IDs
          ACCESS_TOKEN="${{ steps.get_token.outputs.access_token }}"
          DEV_WORKSPACE_ID="${{ secrets.DEV_WORKSPACE_ID }}"
          TEST_WORKSPACE_ID="${{ secrets.TEST_WORKSPACE_ID }}"

          echo "üîç Validating inputs..."
          
          # Validate inputs
          if [ -z "$ACCESS_TOKEN" ]; then
            echo "‚ùå ERROR: ACCESS_TOKEN is empty"
            exit 1
          fi
          
          if [ -z "$DEV_WORKSPACE_ID" ]; then
            echo "‚ùå ERROR: DEV_WORKSPACE_ID is empty"
            exit 1
          fi
          
          if [ -z "$TEST_WORKSPACE_ID" ]; then
            echo "‚ùå ERROR: TEST_WORKSPACE_ID is empty"
            exit 1
          fi

          echo "‚úÖ Inputs validated:"
          echo "   Token length: ${#ACCESS_TOKEN}"
          echo "   Dev workspace: $DEV_WORKSPACE_ID"
          echo "   Test workspace: $TEST_WORKSPACE_ID"

          # Create JSON payload
          JSON_PAYLOAD=$(jq -n --arg target "$TEST_WORKSPACE_ID" '{targetWorkspaceId: $target}')
          if [ -z "$JSON_PAYLOAD" ]; then
            echo "‚ùå ERROR: Failed to create JSON payload"
            exit 1
          fi

          echo "üì¶ JSON payload: $JSON_PAYLOAD"

          # Make deployment request with HTTP status validation
          echo "üåê Making deployment request..."
          DEPLOY_RESPONSE=$(curl -w "\n%{http_code}" -s -X POST \
            "${{ env.FABRIC_API_URL }}/workspaces/$DEV_WORKSPACE_ID/deployWorkspace" \
            -H "Authorization: Bearer $ACCESS_TOKEN" \
            -H "Content-Type: application/json" \
            -d "$JSON_PAYLOAD")

          # Extract HTTP status code and response body
          HTTP_CODE=$(echo "$DEPLOY_RESPONSE" | tail -n1)
          DEPLOY_RESPONSE_BODY=$(echo "$DEPLOY_RESPONSE" | sed '$d')

          echo "üìä Deployment request HTTP status: $HTTP_CODE"

          # Validate HTTP status
          if [ "$HTTP_CODE" != "200" ] && [ "$HTTP_CODE" != "202" ]; then
            echo "‚ùå ERROR: Deployment request failed with HTTP $HTTP_CODE"
            echo "Response: $DEPLOY_RESPONSE_BODY"
            exit 1
          fi

          echo "‚úÖ Deployment initiated successfully"
          echo "üìÑ Response: $DEPLOY_RESPONSE_BODY"

  deploy-test-to-prod:
    name: Deploy from Test to Prod
    needs: deploy-dev-to-test
    runs-on: ubuntu-latest
    steps:
      - name: Get Azure AD Token
        id: get_token
        run: |
          set -e
          set -o pipefail
          
          echo "üîê Requesting Azure AD token..."
          
          # Make token request with HTTP status validation
          TOKEN_RESPONSE=$(curl -w "\n%{http_code}" -s -X POST \
            "${{ env.AZURE_LOGIN_URL }}/${{ secrets.TENANT_ID }}/oauth2/v2.0/token" \
            -H "Content-Type: application/x-www-form-urlencoded" \
            -d "client_id=${{ secrets.CLIENT_ID }}" \
            -d "client_secret=${{ secrets.CLIENT_SECRET }}" \
            -d "scope=https://api.fabric.microsoft.com/.default" \
            -d "grant_type=client_credentials")

          # Extract HTTP status code and response body
          HTTP_CODE=$(echo "$TOKEN_RESPONSE" | tail -n1)
          TOKEN_RESPONSE_BODY=$(echo "$TOKEN_RESPONSE" | sed '$d')

          echo "üìä Token request HTTP status: $HTTP_CODE"

          # Validate HTTP status
          if [ "$HTTP_CODE" != "200" ]; then
            echo "‚ùå ERROR: Token request failed with HTTP $HTTP_CODE"
            echo "Response: $TOKEN_RESPONSE_BODY"
            exit 1
          fi

          # Extract access token
          ACCESS_TOKEN=$(echo "$TOKEN_RESPONSE_BODY" | jq -r '.access_token')
          
          # Validate token extraction
          if [ -z "$ACCESS_TOKEN" ] || [ "$ACCESS_TOKEN" = "null" ]; then
            echo "‚ùå ERROR: Failed to extract access token from response"
            echo "Response: $TOKEN_RESPONSE_BODY"
            exit 1
          fi

          echo "‚úÖ Token obtained successfully (length: ${#ACCESS_TOKEN})"
          echo "::add-mask::$ACCESS_TOKEN"
          echo "access_token=$ACCESS_TOKEN" >> $GITHUB_OUTPUT

      - name: Copy content from Test to Prod
        run: |
          set -e
          set -o pipefail
          
          echo "üöÄ Starting deployment from Test to Prod workspace..."

          # Get token and workspace IDs
          ACCESS_TOKEN="${{ steps.get_token.outputs.access_token }}"
          TEST_WORKSPACE_ID="${{ secrets.TEST_WORKSPACE_ID }}"
          PROD_WORKSPACE_ID="${{ secrets.PROD_WORKSPACE_ID }}"

          echo "üîç Validating inputs..."
          
          # Validate inputs
          if [ -z "$ACCESS_TOKEN" ]; then
            echo "‚ùå ERROR: ACCESS_TOKEN is empty"
            exit 1
          fi
          
          if [ -z "$TEST_WORKSPACE_ID" ]; then
            echo "‚ùå ERROR: TEST_WORKSPACE_ID is empty"
            exit 1
          fi
          
          if [ -z "$PROD_WORKSPACE_ID" ]; then
            echo "‚ùå ERROR: PROD_WORKSPACE_ID is empty"
            exit 1
          fi

          echo "‚úÖ Inputs validated:"
          echo "   Token length: ${#ACCESS_TOKEN}"
          echo "   Test workspace: $TEST_WORKSPACE_ID"
          echo "   Prod workspace: $PROD_WORKSPACE_ID"

          # Create JSON payload
          JSON_PAYLOAD=$(jq -n --arg target "$PROD_WORKSPACE_ID" '{targetWorkspaceId: $target}')
          if [ -z "$JSON_PAYLOAD" ]; then
            echo "‚ùå ERROR: Failed to create JSON payload"
            exit 1
          fi

          echo "üì¶ JSON payload: $JSON_PAYLOAD"

          # Make deployment request with HTTP status validation
          echo "üåê Making deployment request..."
          DEPLOY_RESPONSE=$(curl -w "\n%{http_code}" -s -X POST \
            "${{ env.FABRIC_API_URL }}/workspaces/$TEST_WORKSPACE_ID/deployWorkspace" \
            -H "Authorization: Bearer $ACCESS_TOKEN" \
            -H "Content-Type: application/json" \
            -d "$JSON_PAYLOAD")

          # Extract HTTP status code and response body
          HTTP_CODE=$(echo "$DEPLOY_RESPONSE" | tail -n1)
          DEPLOY_RESPONSE_BODY=$(echo "$DEPLOY_RESPONSE" | sed '$d')

          echo "üìä Deployment request HTTP status: $HTTP_CODE"

          # Validate HTTP status
          if [ "$HTTP_CODE" != "200" ] && [ "$HTTP_CODE" != "202" ]; then
            echo "‚ùå ERROR: Deployment request failed with HTTP $HTTP_CODE"
            echo "Response: $DEPLOY_RESPONSE_BODY"
            exit 1
          fi

          echo "‚úÖ Deployment to Prod completed successfully"
          echo "üìÑ Response: $DEPLOY_RESPONSE_BODY"
